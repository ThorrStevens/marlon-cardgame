{"version":3,"sources":["/Users/thorrstevens/Repos/Aetherspace/marlon-cardgame/assets/Thorr.jpg","/Users/thorrstevens/Repos/Aetherspace/marlon-cardgame/src/AetherspaceBundle/components/Card/Card.tsx","/Users/thorrstevens/Repos/Aetherspace/marlon-cardgame/App.tsx","/Users/thorrstevens/Repos/Aetherspace/marlon-cardgame/web-build/register-service-worker.js"],"names":["module","exports","MIN_CARD_SCALE","Dimensions","get","height","CARD_SCALES","min","mid","max","borderRadiusCSS","css","fillParentCSS","StyledCard","styled","TouchableOpacity","CardSide","View","StyledImage","Image","CardInfo","PersonName","Text","PersonRole","DividerLine","Subtitle","Summary","DraggableCard","animated","CardFront","CardBack","Card","props","useState","flipped","setFlipped","cardScale","setCardScale","scale","useSpring","config","mass","tension","friction","frontOpacity","backOpacity","frontRotateY","backRotateY","style","transform","scaleX","scaleY","onPress","f","opacity","perspective","rotateY","source","require","resizeMode","AppContainer","App","isReady","setIsReady","loadAssetsAsync","useCallback","a","async","images","imageAssets","map","image","prefetch","Asset","fromModule","downloadAsync","Promise","all","AppLoading","startAsync","onFinish","onError","console","warn","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.31a5b07b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Thorr.483c757e.jpg\";","import React, { useState } from 'react';\nimport { View, Image, Text, TouchableOpacity, Dimensions } from 'react-native';\nimport styled, { css } from 'styled-components/native';\nimport { useSpring, animated } from 'react-spring/native';\n\n/* --- Constants ------------------------------------------------------------------------------ */\n\nconst perspective = 350;\n\nconst { height } = Dimensions.get('window');\nconst ROW_HEIGHT = height / 8;\n\nconst MIN_CARD_SCALE = ROW_HEIGHT / 320;\nconst MID_CARD_SCALE = MIN_CARD_SCALE * 2;\nconst MAX_CARD_SCALE = 1;\n\nconst CARD_SCALES = {\n    min: MIN_CARD_SCALE,\n    mid: MID_CARD_SCALE,\n    max: MAX_CARD_SCALE,\n};\n\n/* --- Styles ------------------------------------------------------------------------------ */\n\nconst borderRadiusCSS = css`\n    border-radius: 14px;\n`;\n\nconst fillParentCSS = css`\n    width: 100%;\n    height: 100%;\n`;\n\n// -- Styled Components --\n\nconst StyledCard = styled(TouchableOpacity)`\n    width: 220px;\n    height: 320px;\n    ${borderRadiusCSS}\n`;\n\nconst CardSide = styled(View)`\n    position: absolute;\n    ${fillParentCSS}\n    ${borderRadiusCSS}\n    overflow: hidden;\n    background-color: #fff;\n`;\n\nconst StyledImage = styled(Image)`\n    ${fillParentCSS}\n`;\n\nconst CardInfo = styled(View)`\n    ${fillParentCSS}\n    flex: 1;\n    align-items: center;\n`;\n\nconst PersonName = styled(Text)`\n    margin-top: 32px;\n    font-size: 16px;\n    font-weight: bold;\n    color: #1f4b90;\n`;\n\nconst PersonRole = styled(Text)`\n    margin-top: 6px;\n    font-size: 8px;\n    font-weight: bold;\n    color: #87cffa;\n`;\n\nconst DividerLine = styled(View)`\n    margin: 20px 0px;\n    width: 35px;\n    height: 1px;\n    background-color: #87cffa;\n`;\n\nconst Subtitle = styled(Text)`\n    margin-bottom: 6px;\n    font-size: 8px;\n    font-weight: bold;\n    color: #333333;\n`;\n\nconst Summary = styled(Text)`\n    margin-bottom: 32px;\n    text-align: center;\n    font-size: 10px;\n    font-weight: bold;\n    line-height: 16px;\n    color: #1f4b90;\n`;\n\n// -- Animated Components --\n\nconst DraggableCard = animated(StyledCard);\nconst CardFront = animated(CardSide);\nconst CardBack = animated(CardSide);\n\n/* --- <Card/> ------------------------------------------------------------------------------ */\n\nconst Card = props => {\n    // State\n    const [flipped, setFlipped] = useState(false);\n    const [cardScale, setCardScale] = useState('mid');\n\n    // Springs\n    const { scale } = useSpring({\n        scale: CARD_SCALES[cardScale],\n        config: { mass: 5, tension: 500, friction: 80 },\n    });\n    const { frontOpacity, backOpacity, frontRotateY, backRotateY } = useSpring({\n        frontOpacity: flipped ? -0.7 : 1,\n        backOpacity: flipped ? 1 : -0.7,\n        frontRotateY: `${flipped ? 180 : 0}deg`,\n        backRotateY: `${flipped ? 0 : -180}deg`,\n        config: { mass: 5, tension: 500, friction: 80 },\n    });\n\n    // Render\n    return (\n        <DraggableCard\n            style={{ transform: [{ scaleX: scale }, { scaleY: scale }] }}\n            onPress={() => {\n                setFlipped(f => !f);\n                setCardScale(flipped ? 'mid' : 'max');\n            }}\n        >\n            <CardFront\n                style={{\n                    opacity: frontOpacity,\n                    transform: [{ perspective }, { rotateY: frontRotateY }],\n                }}\n            >\n                <StyledImage source={require('../../../../assets/Thorr.jpg')} resizeMode=\"cover\" />\n            </CardFront>\n            <CardBack style={{ opacity: backOpacity, transform: [{ perspective }, { rotateY: backRotateY }] }}>\n                <CardInfo>\n                    <PersonName>Thorr Stevens</PersonName>\n                    <PersonRole>JavaScript developer</PersonRole>\n                    <DividerLine />\n                    <Subtitle>Je moet bij mij zijn voor</Subtitle>\n                    <Summary>Fratello serverside rendering</Summary>\n                    <Subtitle>Maar ook voor info over</Subtitle>\n                    <Summary>\n                        React hooks of componenten{'\\n'}\n                        React Native apps{'\\n'}\n                        Node & JavaScript{'\\n'}\n                        Marvel films{'\\n'}\n                        thunder & lightning\n                    </Summary>\n                </CardInfo>\n            </CardBack>\n        </DraggableCard>\n    );\n};\n\n/* --- Export ------------------------------------------------------------------------------ */\n\nexport default Card;\n","import React, { useState, useCallback } from 'react';\nimport { View, Image } from 'react-native';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport styled from 'styled-components/native';\n// Components\nimport { Card } from './src/componentRegistry';\n\n/* --- Styles ------------------------------------------------------------------------------ */\n\nconst AppContainer = styled(View)`\n    flex: 1;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    background-color: #87cffa;\n`;\n\n/* --- Load Assets ------------------------------------------------------------------------------ */\n\nconst cacheImages = images =>\n    images.map(image => {\n        return typeof image === 'string' ? Image.prefetch(image) : Asset.fromModule(image).downloadAsync();\n    });\n\n/* --- <App/> ------------------------------------------------------------------------------ */\n\nconst App = () => {\n    // State\n    const [isReady, setIsReady] = useState(false);\n\n    // -- componentRegistry() --\n\n    const loadAssetsAsync = useCallback(async () => {\n        const imageAssets = cacheImages([require('./assets/Thorr.jpg')]);\n        await Promise.all([...imageAssets]);\n    }, []);\n\n    // -- Render --\n\n    return isReady ? (\n        <AppContainer>\n            <Card />\n        </AppContainer>\n    ) : (\n        <AppLoading startAsync={loadAssetsAsync} onFinish={() => setIsReady(true)} onError={console.warn} />\n    );\n};\n\n/* --- Export App ------------------------------------------------------------------------------ */\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}